Locust:
------
------
------


Tutorial 1: Getting Started with Locust:
--------------------------------------


Locust is the load testing tool.
It uses python
It is open source


Prerequest:
minimum python 3.6 or above


To install use below command

pip install locust
or
pip3 install locust

locust -V   //This will show the version of locust



Locust will support multiple protocols. By default it comes with http and https
Load testing can be done in distributed environment. Can have multiple nodes with master and slave architecture

We can use any IDE. I will use pycharm here


Open pycharm
Create project
Give project name
Give environment as virtual env and select python version base interpreter



---------------

Tutorial 2: user class:
-------------------

Below are frequently used class in locust
User
HttpUser
TaskSet
SequentialTaskSet
httpSession
Response
ResponseContextManager
Environment
Runner
WebUI



User class is the simple class used to create users to attach the system


Inside User class we can make use of below variables and methods to achive the test

abstract = True
on_start()
on_stop()
tasks
wait()
wait_time()
weight = 10


To go into env use below command
.\venv\Scripts\activate.bat


To come out of the env use below command
.\venv\Scripts\deactivate.bat



Create sample file in root with file name as app

Eg:

from locust import User, task


class MyUsers(User):

    @task
    def launch(self):
        print("launch da")

    @task
    def search(self):
        print("search da")


To run use below command

locust -f filename            //This command is used to execute
Eg:
locust -f app.js


http://localhost:8089/         //in browser open this and give total number of users, users per sec etc


Give total users, user per sec etc

We can stop the test in UI


Example with multiple users:

from locust import User, task, constant


class MyUsers(User):
    weight = 2         //How much weightable of users we should give
    wait_time = constant(1)

    @task
    def launch(self):
        print("launch da")

    @task
    def search(self):
        print("search da")


class MyUsers2(User):
    weight = 2    //How much weightable of users we should give
    wait_time = constant(1)

    @task
    def launch2(self):
        print("launch 2 da")

    @task
    def search2(self):
        print("search 2 da")



Number of users (peak concurrency): //How many task we have given give simular 
In above case, we will give 4 to pick all 4

Spawn rate (users started/second): 
This also matters




-------------


Tutorial 3: HttpUser class
----------------------

HttpUser is used to call http calls
It has client and different methods like get, post, put, delete etc
We can use this for api load testing.

Example:

from locust import HttpUser, task, constant

class MyHttpUsers(HttpUser):
    host = "https://reqres.in"           //host parameter is important. it will this host. If we not given, then we have to  pass while running as like --host="https://reqres.in"
    wait_time = constant(1)

    @task
    def get_users(self):
        self.client.get('/api/users?page=2')  //Get method

    @task
    def create_user(self):
        self.client.post('/api/users', data='''{ "name": "morpheus", "job": "leader" }''')  //Post method by passing json body



Example 2:
from locust import HttpUser, task, constant

class MyHttpUsers(HttpUser):
    wait_time = constant(1)

    @task
    def get_users(self):
        res = self.client.get('/api/users?page=2')
        print(res.status_code)    //printing status code
        print(res.headers)        //printing all headers
        print(res.text)           //printing response body

    @task
    def create_user(self):
        res = self.client.post('/api/users', data='''{ "name": "morpheus", "job": "leader" }''')
        print(res.status_code)
        print(res.headers)
        print(res.text)



In example 2, i have not used host. So i will past host when running. Eg: locust -f filename.js --host="https://reqres.in"

----------

Tutorial 4: Learn locust series: TaskSet class Part 1
------------------------------------------------------

TaskSet will have many tasks.
We should have User or HttpUser and add all TaskSet in task, then only it will work.

Eg:   //file name is myendpoints.py  . It is under alltasksets

from locust import TaskSet, constant, task, HttpUser
import random

class MyApisTask(TaskSet):

    @task
    def get_page_api(self):
        self.client.get('/api/users?page=2')
        print('Get api page 2')

    @task
    def get_differnt_id_api(self):
        ids = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
        random_endpoint = "/api/users/" + str(random.choice(ids))
        self.client.get(random_endpoint)
        print('Each api with id')

class MyUser(HttpUser):
    host = "https://reqres.in"
    tasks = [MyApisTask]                          //We can have multiple taskset
    wait_time = constant(1)



To run give below command:
locust -f alltasksets\myenpoints.py

Then give in UI


-----------

Tutorial 5:TaskSet class Part 2
--------------------------------
Two way we can have multiple taskSet class.
1. Nested taskset class
2. 2 seperate class for taskset

Nested taskset class:
We can have nested taskset class. (taskset class inside another taskset class)
to come out of the inner nested taskset class we need to use self.interrupt(). Else it will loop into same class
To give breathing time use self.interrupt(reschedule = False). So that it will give breathing time. By default reschedule will be True. so we are changing to False

Eg:
from locust import TaskSet, task, constant, HttpUser

class MyTaskSet1(TaskSet):

    @task
    def first_api(self):
        res = self.client.get('/api/users/2')
        print('First api')

    @task
    class MyTaskSetNested(TaskSet):

        @task
        def second_api(self):
            res = self.client.get('/api/users?page=2')
            print('Second api')
            self.interrupt(reschedule = False)

class MyHttp(HttpUser):
    host = "https://reqres.in"
    tasks = [MyTaskSet1]
    wait_time = constant(1)




2 seperate class for taskset:
We can add all taskset class in tasks of user / httpuser class
tasks = [Mytaskset1, mytaskset2]
also use self.interrupt(), else it will loop into same class
To give breathing time use self.interrupt(reschedule = False) in both task method of both class. So that it will give breathing time. By default reschedule will be True. so we are changing to False.

Eg:
from locust import TaskSet, task, constant, HttpUser


class MyTaskSet1(TaskSet):

    @task
    def first_api(self):
        self.client.get('/api/users/2')
        print('First api')
        self.interrupt(reschedule=False)


class MyTaskSet2(TaskSet):

    @task
    def second_api(self):
        self.client.get('/api/users?page=2')
        print('Second api')
        self.interrupt(reschedule=False)


class MyHttpUser(HttpUser):
    host = "https://reqres.in"
    tasks = [MyTaskSet1, MyTaskSet2]
    wait_time = constant(1)



---------------


Tutorial 6: Sequential Task Set
-------------------------------

SequentialTaskSet
This is simular to TaskSet. But SequentialTaskSet will run each task one by one. It will run each task in sequence

Example:
from locust import SequentialTaskSet, constant, task, HttpUser


class MySequentialTask(SequentialTaskSet):

    @task
    def api_one(self):
        self.client.get('/api/users?page=2')
        print('First api')

    @task
    def api_second(self):
        self.client.get('/api/users/5')
        print('Second api')


class MyHttpUser(HttpUser):
    host = "https://reqres.in"
    tasks = [MySequentialTask]
    wait_time = constant(1)


----------

Tutorial 7: Wait time function
-------------------------------

Three 3 types of wait time we can give
Eg:
wait_time = constant(2)   //Constant wait time . In this example it will wait 2 sec after each task
wait_time = between(5, 10)  //This will take random time between given two values. In this example, it will take wait time randomly between 5 sec to 10 for each task
wait_time = constant_pacing(3) //This is minimum time a task should take. In this example we have given 3 sec, so it will take minimum 3 sec for each task. Does not matter how fast it is. still it will for 3 sec. Does not worry about if task takes more than 3 sec. Just will say take minimum 3 sec for an task. thats it



Example for constant:

from locust import User, constant, task

class MyUser(User):

    wait_time = constant(5)        //Wait for 5 sec in every task

    @task
    def my_task(self):
        print('My task. It will wait for 2 sec as constant is 2 sec')



Example for between:

from locust import task, User, between


class MyUser(User):
    wait_time = between(2, 5)

    @task
    def my_task(self):
        print('This task will randomly wait between 2 to 5 sec')



Example for constant_pacing:

from locust import User, task, constant_pacing
import time


class MyUser(User):

    wait_time = constant_pacing(5)

    @task
    def my_task(self):
        time.sleep(2)         //Here sleep is 2, so it will wait for 2 sec, As constant pacing is 5, it will wait 3 more sec to achive 5 sec (2+3 = 5) //Minimum it should wait for 5 sec
        print('My task. It will wait for 5 sec') 


constant_pacing Example with  more wait inside task it self:

from locust import User, task, constant_pacing
import time


class MyUser(User):

    wait_time = constant_pacing(5)

    @task
    def my_task(self):
        time.sleep(10) //It will wait for 10 sec. Miniumum it should wait for 5 as per constant_parsing. So it will wait for 10 sec sleep and go further
        print('My task. It will wait for 10 sec')


------------

Tutorial 8: Command line option part 1:
--------------------------------------
locust -h    //This will give all available commands in locust

Sample commnad to run load test and geting the result
locust -f script.py -u 10 -r 2 -t 10s --headless --print-stats --csv result.csv --csv-full-history --host=http://hostname.com
-f  //this is to give script file name with path
-u   //This is for giving number of users. It is will number of users per sec. If it is 5, it will call 5 users
-r   //number of per sec. if we give 2 as -r, then it will use above users in give -r. We can use -r 1. So that it will take above users in 1 sec
-t   //total time of performance test.Here s meaning sec, m meaning minutes, h mearing hours. Eg: 10s - 10 sec, 1h - 1 hour, 2m - 2 mins
--headless   //To run without opening locust webUI
--print-stats   //To print stats result in terminal
--csv   //To store result in csv file. Give file name Eg: --csv result.csv
--csv-full-history   //To store full csv result in csv file
--host       //To give host name


Eg:
locust -f tutorial8samplescriptforcheckingthecommand.py -u 6 -r 1 -t 10s --headless --print-stats --csv result.csv --csv-full-history --host=https://reqres.in


//This will run and generate 4 csv files. files for exceptions, failures, stats and stats history
//We can use sample command for running in CICD also

Used below sample file:

from locust import HttpUser, task, constant


class MyHttpUser(HttpUser):
    wait_time = constant(1)

    @task
    def my_api(self):
        res = self.client.get('/api/users?page=2')
        print('Called the api. response is:', res.status_code)

---------

Tutorial 8: Command line option part 2:
--------------------------------------

-L DEBUG --logfile filename.logs    //This is storing load test log files. we can give log level. We can give any of the them in DEBUG/INFO/WARNING/ERROR/CRITICAL

--html htmlfoldername.html

locust -f script.py -u 10 -r 2 -t 10s --headless --print-stats --csv result.csv --csv-full-history --host=http://hostname.com -L DEBUG --logfile filename.logs --html htmlfoldername


locust -f script.py -l   //This will list all users classes

locust -f script.py --show-task-ratio    //This will show task execution ratio. Show how the load will be splited if we run.

locust -f script.py --show-task-ratio-json    //This will show task execution ratio in json format. Show how the load will be splited if we run. It will show above in json format



Sample file:
from locust import HttpUser, task, constant

class MyHttpUsers(HttpUser):
    host = "https://reqres.in"
    wait_time = constant(1)

    @task
    def get_users(self):
        self.client.get('/api/users?page=2')

    @task
    def create_user(self):
        self.client.post('/api/users', data='''{ "name": "morpheus", "job": "leader" }''')





Commands:

locust -f tutorial9commandsWithLogsAndHtmletc.py -l

locust -f tutorial9commandsWithLogsAndHtmletc.py --show-task-ratio

locust -f tutorial9commandsWithLogsAndHtmletc.py --show-task-ratio-json 

locust -f tutorial9commandsWithLogsAndHtmletc.py -u 2 -r 3 -t 20s --headless --print-stats --host=https://reqres.in -L DEBUG --logfile test.log --html uireport.html

-------------

Tutorial 10: on start and on stop method:
---------------------------------------

on_start and on_stop methods are available in User class, HttpUser class, TaskSet class and SequencialTaskSet class
on_start will be called when starting the class. We can use for preparing test data or login etc
on_stop will be called when stopping the class. we can use this for cleaning test data or loggout etc


If on_start and on_stop is available in User/HttpUser and TaskSet/SequencialTaskSet.
It  will execute on_start of User/HttpUser, then on_start of TaskSet/SequenctialTaskSet, then on_stop of TaskSet/SequenctialTaskSet, then on_stop of User/HttpUser.

Example 1:
from locust import User, task, constant


class MyUser(User):
    wait_time = constant(1)

    def on_start(self):
        print('Start')

    @task
    def my_task1(self):
        print('task 1')

    @task
    def my_task2(self):
        print('task 2')

    def on_stop(self):
        print('Stop')


Example 2:
from locust import SequentialTaskSet, HttpUser, task, constant


class MyTaskPages(SequentialTaskSet):

    def on_start(self):
        print('Start seq')

    @task
    def my_page2(self):
        res = self.client.get('/api/users?page=2')
        print('Called the page 2. response is:', res.status_code)

    @task
    def my_page3(self):
        res = self.client.get('/api/users?page=3')
        print('Called the page 3. response is:', res.status_code)

    def on_stop(self):
        print('Stop seq')


class MyHttpUser(HttpUser):

    host = "https://reqres.in"
    wait_time = constant(1)
    tasks = [MyTaskPages]

    def on_start(self):
        print('Start httpuser')

    def on_stop(self):
        print('Stop httpuser')



Example 3:

from locust import TaskSet, HttpUser, task, constant


class MyTaskPages(TaskSet):

    def on_start(self):
        print('Start seq')

    @task
    def my_page2(self):
        res = self.client.get('/api/users?page=2')
        print('Called the page 2. response is:', res.status_code)

    @task
    def my_page3(self):
        res = self.client.get('/api/users?page=3')
        print('Called the page 3. response is:', res.status_code)

    def on_stop(self):
        print('Stop seq')


class MyHttpUser(HttpUser):

    host = "https://reqres.in"
    wait_time = constant(1)
    tasks = [MyTaskPages]

    def on_start(self):
        print('Start httpuser')

    def on_stop(self):
        print('Stop httpuser')


--------

Tutorial 11: Validating responses
----------------------------------
We need to validate the response, then only we may know whether the response of the api is success of failure.

catch_response=True      //This is make task success or failure using below

response.success()   //This is to make the task success
response.failure('Give reason or messasge')   //This is to fail the task


Example:

from locust import HttpUser, constant, task, TaskSet


class MyTasks(TaskSet):

    @task
    def first_api(self):
        response = self.client.get('/api/users/3', name='API 1')
        print(response)  #this will just pring the status code with objectname as response

    @task
    def second_api(self):
        with self.client.get('/api/users/2', catch_response=True,name='API 2') as response:                //This is to capture the response and store in object/file response
            result = True if 'Weaver' in response.text else False                            //Validating whether response has text 'Weaver' or not
            print(self.second_api.__name__, result)
            if result == True:
                response.success()                                                //Making the task success
            else:
                response.failure('Weaver not available in response')                 //This line is to fail

    @task
    def third_api(self):
        with self.client.get('/api/users/3', catch_response=True, name='API 3') as response:
            result = True if 'raman' in response.text else False
            print(self.third_api.__name__, result)
            if result == True:
                response.success()
            else:
                response.failure('raman not available in response')


class MyHttp(HttpUser):
    host = "https://reqres.in"
    tasks = [MyTasks]
    wait_time = constant(1)


----------

Tutorial 12: Data parameterization or test data in locust
--------------------------------------------
Multiple ways we can get test data using any python code
1. Test data in seperate file
2. Test data in python file
3. Test data in third party libary
4. ....etc and more


Example: 

file name: testData.csv

name,job
Ram,leader
Kumar,manager
dinesh,admin
Rahul,IT

filename: testDataUtil.py

import csv
import random


class CsvData:

    def __init__(self, file):
        try:
            file = open(file)
        except FileNotFoundError:
            print('File not found')

        self.file = file
        self.reader = csv.DictReader(file)

    def read(self):
        return random.choice(list(self.reader))


filename: tutorial12dataParameterization.py

from locust import HttpUser, constant, task, TaskSet
from testDataUtil import CsvData

class MyTaskSet(TaskSet):

    @task
    def my_api(self):
        testData = CsvData('dataParameterization\\testData.csv').read()
        print('Request: ', testData)
        data = {
            "name": testData['name'],
            "job": testData['job']
        }
        name = 'Request for ' + testData['name']
        with self.client.post('/api/users', catch_response=True, name=name, data=data) as response:
            print('Response: ', response.text)
            if response.status_code == 201 and testData['name'] in response.text:
                response.success()
            else:
                response.failure(testData['name'] + ' not available in response')


class MyHttp(HttpUser):
    host = 'https://reqres.in'
    tasks = [MyTaskSet]
    wait_time = constant(1)


------

Tutorial 13: Tag
----------------
This is like a group name. 
We can run with tag name. so that it will run the task which are matching tag

We can add one or multiple tag name for the task.
@tag('sanity', 'mytag', 'regression')

--tags tagname //This is used to run tasks which has only tag name
--exclude-tags tagname  //This will exclude only the given tag and run rest of the tasks

locust -f tutorial13tag.py -u 1 -r 1 -t 10s --headless --only-summary --tags mytag1   //This is to run only mytag1
locust -f tutorial13tag.py -u 1 -r 1 -t 10s --headless --only-summary --tags mytag1 mytag3    //This is to run multiple tags
locust -f tutorial13tag.py -u 1 -r 1 -t 10s --headless --only-summary --exclude-tags mytag2   //This is to exclude mytag2 and run rest
locust -f tutorial13tag.py -u 1 -r 1 -t 10s --headless --only-summary --exclude-tags mytag2 mytag3 //This is to exclude multiple tags and run rest
locust -f tutorial13tag.py -u 1 -r 1 -t 10s --headless --only-summary --tags mytag1 --exclude-tags mytag2 //This will run only given mytag1 and exclude mytag2


Used example:
from locust import HttpUser, constant, task, TaskSet, tag

class MyTaskSet(TaskSet):

    @task
    @tag('mytag1')
    def my_api1(self):
        self.client.get('/api/users/1')
        print('mytag1')

    @task
    @tag('mytag2')
    def my_api2(self):
        self.client.get('/api/users/2')
        print('mytag2')

    @task
    @tag('mytag1', 'mytag2')
    def my_api3(self):
        self.client.get('/api/users/3')
        print('mytag1 mytag2')

    @task
    @tag('mytag3')
    def my_api4(self):
        self.client.get('/api/users/4')
        print('mytag3')


class MyHttp(HttpUser):
    host = 'https://reqres.in'
    tasks = [MyTaskSet]
    wait_time = constant(1)

--------------

Tutorial 14: Correlation in locust
----------------------------------
This is getting value from one request and passing the value in next/upcomming requests.
By this way we will connect the end to end flow.
This can be used in passing sessionId, order id, token, key in further api's

For getting the value from response, we can use regular expression or json parsing or any other way


Example:

from locust import HttpUser, constant, task, SequentialTaskSet
import re
import random


class EndToEnd(SequentialTaskSet):

    def __init__(self, parent):
        super().__init__(parent)
        self.session = ""
        self.product = ""

    @task
    def web_ui(self):
        with self.client.get('', catch_response = True, name='UI') as response:
            print('web UI')
            if response.status_code == 200 and "Welcome to JPetStore 6" in response.text:
                response.success()
            else:
                response.failure('Welcome message unavailable')

    @task
    def enter_store(self):
        with self.client.get('/actions/Catalog.action', catch_response = True, name='Store') as response:
            print('Enter to store')
            if response.status_code == 200:
                products = ['Fish', 'Dogs', 'Cats', 'Reptiles', 'Birds']
                for eachProduct in products:
                    if eachProduct in response.text:
                        response.success()
                        try:
                            jsession = re.search(r"jsessionid=(.+?)\?", response.text) #this will geive the sessionid
                            self.session = jsession.group(1)  #this will give only first group
                        except:
                            self.session = ""
                    else:
                        response.failure(eachProduct + ' unavailable')
            else:
                response.failure('Status code not matchs')

    @task
    def sign_page(self):
        url = "/actions/Account.action;jsessionid="+ self.session +"?signonForm="
        with self.client.get(url, catch_response=True, name="signin_page") as response:
            print('Signin page')
            if response.status_code == 200 and "Please enter your username and password." in response:
                response.success()
            else:
                response.failure('Not in signin page')

    @task
    def signin_with_credential(self):
        data = {
            "username": "j2ee",
            "password": "j2ee",
            "signon": "Login"
        }
        with self.client.post('/actions/Account.action', data = data, catch_response = True, name = 'sign') as response:
            print('doing Login')
            if "Welcome ABC!" in response.text:
                response.success()
                try:
                    allProducts = re.findall(r"&categoryId=(.+?)\"", response.text)  #this will give all values
                    self.product = random.choice(allProducts)
                except AttributeError:
                    self.product = ""
            else:
                response.failure('Login failed')

    @task
    def product_page(self):
        url = "/actions/Catalog.action?viewCategory=&categoryId=" + self.product
        with self.client.get(url, catch_response = True, name = "Product page") as response:
            print('Product detail page')
            if self.product in response.text:
                response.success()
            else:
                response.failure('Product page unsuccessfull')

    @task
    def logoff(self):
        with self.client.get("/actions/Account.action?signoff=", catch_response=True, name='signoff') as response:
            print('Doing logoff')
            if 'Sign In' in response.text:
                response.success()
            else:
                response.failure('logoff unsuccessfull')


class PetStorPerf(HttpUser):
    host = "https://petstore.octoperf.com"
    tasks = [EndToEnd]
    wait_time = constant(1)


----------

Tutorial 15: Logging
--------------------
Logging helps more for debugging
locust uses python logging framework

We can import logging like below
import logging

Below are the different levels of logging
logging.info("message to log")
logging.error("message to log")
logging.critical("message to log")
logging.debug("message to log")
logging.warning("message to log")

We can use below sub command regarding logging

--skip-log-setup          //This will skip the logging
--logfile mylog.log        //This is to create log file and to store logs in this file  //It can create new file if file is not available //But if we give filname along with directory, then directory should exits. it wont create directory. 
--loglevel DEBUG     //This is to give log level. We can give DEBUG or INFO or WARNING or ERROR or CRITICAL     

DEBUG includes all logs, INFO will print only infor logs. Others will be based on it level and include the order based on level


Example: file name tutorial15logging.py 

from locust import HttpUser, task, constant, TaskSet
import logging    #importing python inbuild logging

class MyTaskSet(TaskSet):

    @task
    def get_users(self):
        with self.client.get('/api/users?page=2', catch_response = True, name = 'page api') as response:
            logging.info('Response is: ' + response.text)   #way to add logs. we will give info or debug etc
            if response.elapsed.total_seconds() < 2:
                logging.debug('Response code is: ' + str(response.status_code))
                logging.debug('Response time is: ' + str(response.elapsed.total_seconds()))
                response.success()
            else:
                logging.debug('Response code is: ' + str(response.status_code))
                logging.debug('Response time is: ' + str(response.elapsed.total_seconds()))
                response.failure('Response takes more than 2 sec')


class MyHttpUsers(HttpUser):
    host = "https://reqres.in"
    tasks = [MyTaskSet]
    wait_time = constant(1)


command:

locust -f tutorial15logging.py -u 1 -r 1 -t 10s --headless --logfile logs\test.log --loglevel DEBUG --only-summary

------------------------------------------------------


Tutorial 16: Locust configuration
-------------------------------


We can pass the configuration values in commandline. Eg: --host, -u, -r
locust -h will show all commands


In below link we can see documentation about configuration of environment and command line
https://docs.locust.io/en/latest/configuration.html#environment-variables



Below are few environment variable where locust will look for while running the test.  
LOCUST_HOST
LOCUST_USERS
LOCUST_SPAWN_RATE
LOCUST_HEADLESS
LOCUST_TAGS
LOCUST_MODE_MASTER
LOCUST_MODE_WORKER
etc..

Configuration file should be stored in below extension
filename.conf
or
filename.yaml

Eg: Sample locust.conf file

[runtime settings]

host = http://example.com
users = 2
spawn-rate = 1
run-time = 5s
headless = true
only-summary = true


Eg: Sample locust.yaml file

---
# Runtime Settings

host: https://google.com
users: 2
spawn-rate: 1
run-time: 5s
headless: true
only-summary: true


Regarding config priority,
First command line value has higher priority,
Then environment variable
then --config file                    //Eg: locust -f script.py --config givefilenamewithpath.conf
then config file(./locust.conf) in root directory. Should have same name locust.conf
Then config file(~/locust.conf) in current directory. should have same naume locust.conf


----------------------------------------

Tutorial 17: Events and Eventhook
---------------------------------
Events:                                                //This is simular to java testng listener
Events is used to some thing to do during below
Before started if want to clean data or if wanted to create test data
During test if request fails what to do next
After request pass, what to do nex
After the test is done, about to shutdown, what to do next


Events: We can use below events
test_start
test_stop
on_locust_init
request_failure
request_success
reset_stats
user_error
report_to_master
etc...

To fire the event, use like below
from locust import events
use the decorator. // Just like adding @events
Eg @events.spawning_complete.add_listener   //Here we are giving type of the event and action. In this case spawning_complete is the type and add_listener is action
Recommanded to use **kwargs

Eg:

@events.spawning_complete.add_listener
def spawn_users(user_count, **kwargs):
	print("Spawned...", user_count, " users.")



EventHook:
This is add our own event using eventhook
This is fire our own events
reverse=False is default. If we give reverse=True, then this will fire events in the reverse order

Eg:
my_event = EventHook()
	def on_my_event(a, b, **kw):   //minimum two parameter is mandatory. We should also give key word aruguments **kw
		print("Event was fired with arguments : %s, %s" % (a, b))
	my_event.add_listener(on_my_event)
	my_event.fire(a="foo", b="bar")

--------------------

Tutorial 18: Distributed load testing
-------------------------------------
We cannot generate more  load due to limitation in CPU, Memory, Network etc.
To generate more load, we need more machine connected together and run the load testing.
We can have multiple machines and generate more load.

Here we can have one master who will talk to workers.
We can have multiple workers who will call the api and generate the load.

Master setup can be  done with below file
Eg: master.conf
[master conf]
master = true                      //Only if it true, then master machine will assign himself as master
expect-workers = 2                 //Expected number of workers. Unless all workers are up, it wont start the script

[runtime settings]
host = https://petstore.octoperf.com
users = 3
spawn-rate = 1
locustfile = myfolder\petstore.py
run-time = 60s
headless = true
only-summary = true



 //If we wanted to run in UI, remove run-time, headless, only-summary fields in above





worker setup can be done using  below

Eg: worker.conf
[worker conf]
worker = true                           //It should be true, then only it will act as worker
locustfile = myfolder\petstore.py
master-host = xxx.xxx.xxx.xxx            //Give ip address. If you are running in local, give localhost



Repo should be available in master and worker machines

Go to  master machine
First we should run master using below command
locust --config folderpath/master.conf

Then it will run as master and wait for worker to join


Then go to worker machine and run below command
locust --config folderpath/worker.conf

Then worker will automatically join the master.
Once expected workers are up, it will automatically run the script
And the result will be shown on worker

When running on UI mode, we can give master ip and port in chrome to open the web UI of locust,
We can see the tab workers, There we can see how many workers are there and the status, cpu usage, memory usage etc


Important:
Locust script/repo should presend in both master and worker machines
number_of_users > number_user_classes * number_of_workers  //Number of users should be always greater than product of user classes and workers


Note:
To just to this, we can open two/three different terminal and we can go to venv\Scripts\activate
And then we can run and check

In terminal 1:
venv\Scripts\activate
locust --config distributedLoadTesting\master.conf

In terminal 2:
venv\Scripts\activate
locust --config distributedLoadTesting\worker.conf

In terminal 3:
venv\Scripts\activate
locust --config distributedLoadTesting\worker.conf


------------------------------------------------------

Tutorial 19: Locust in docker
-----------------------------

Below is to create the docker container and to run the locust :


Go to path where the locust script is there. Eg: locustscript.py


Now use below command to run the locustscript in docker

docker run -p 8089:8089 -v $PWD:/mnt/locust -d locustio/locust -f /mnt/locust/locustscript.py

//Here the image is locustio/locust  // locustio/locust
//It will run the locust web ui in 8089   //-p 8089:8089   //We should open 
//It will mount current directory with given pat.  //-v $PWD:/mnt/locust  //This will map current directory with containers directory
//then the script file to run  //locustio/locust -f /mnt/locust/locustscript.py

It will run the locust web ui in port 8089  Give http://ipaddress:8089   


Below is to run the locust in headless mode:

docker run -v $PWD:/mnt/locust locustio/locust -f /mnt/locust/locustscript.py --html /mnt/locust/report.html --headless --only-summary -r 1 -u 1 -t 10s


//Here the image is locustio/locust  // locustio/locust
//It will mount current directory with given pat.  //-v $PWD:/mnt/locust  //This will map current directory with containers directory
//To run the locust in headless mode and to generate html report:     //locustio/locust -f /mnt/locust/locustscript.py --html /mnt/locust/report.html --headless --only-summary -r 1 -u 1 -t 10s
//we might face error when generating html report


docker ps   //To check the running container

docker exec -it containerId /bin/bash  //To login to container


--------------------------------------------------------------------

Tutorial 20: Distributed load testing in docker
----------------------------------------------
Here we will use docker compose to achive distributed load 

Create docker-compose.yaml file with below like content

Eg:
version: '3'

services: 
   master:
      image: locustio/locust
      ports:
       - "8089:8089"
      volumes:
       -./:/mnt/locust
      command: -f /mnt/locust/locustscriptfile.py --master --expect-workers 2

   worker1:
      image: locustio/locust
      volumes:
       - ./:/mnt/locust
      command: -f /mnt/locust/locustscriptfile.py --worker --master-host master
      #command: -f /mnt/locust/locustscriptfile.py --master --expect-workers 2 --headless --only-summary -u 2 -r 1 -t 30s --html /mnt/locust/myresult.html  //This is to run in headless mode

   worker2:
      image: locustio/locust
      volumes:
       - ./:/mnt/locust
      command: -f /mnt/locust/locustscriptfile.py --worker --master-host master


To run give below command
docker-compose up

Now we can open the locust web ui in browser in using url https://ipaddress:8089  //Give master ip address. Also we should open the port 8089 if it is not opened

To stop the we can press ctrl+c to stop and terminate

To delete contrainers created by docker compose, use below command
docker-/compose rm

To run in headless we can modify command under maste like below. 
command: -f /mnt/locust/locustscriptfile.py --master --expect-workers 2 --headless --only-summary -u 2 -r 1 -t 30s --html /mnt/locust/myresult.html
//--headless is to run the script in headless mode
//-u number of users
//-r rate of frequency
//-t total duration
//--html filepathtogeneratehtmlresult.html   //This is to generate html report


It will run in headless mode, and it will generate html report file
We can check the report file post running is completed

------------------------------------------------------------------




-------------

To run in UI:
-------
--------

Go to virtual env first using below command

.\venv\Scripts\activate.bat



To launch use below command.

locust -f filename.js //This will start running the locust. Also show the url of locust UI.

Open browser and give url which is showing in above logs. Eg: http://localhost:8089/

Then we can give number of users, user per sec and host //these things we can also give in command line also like host etc
Click start swarming

Then it will start running.

UI will few options.
statistics - this will give more details about number of request, respons time, 90%ile, 99%ile, failure and more
Chart - will give the number of request per sec, response time and number of users etc in each time
Failure - this will give details about failure
Exception - this will give if any exception occurs in our load script when load running
Current ratio - this will ratio per user class and total ratio
Download data - here we can download the result in csv file


We can stop by clicking stop button in statistics
We can also click new test to again run the tes 


Notes:
-----
We might face permission denied error when generating html report file when running in docker. If we use mount volume we might face
In that case we can avoid using entire path of volume to generate html. This is because it will run locust with  user name locust. But the volume mount is in root.
We can just give html file name. It will generate html report inside docker container in home/locust.
Then we can move the report from container to  host machine




---


-----------------
