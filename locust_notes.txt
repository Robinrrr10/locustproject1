Locust:
------
------
------


Tutorial 1: Getting Started with Locust:
--------------------------------------


Locust is the load testing tool.
It uses python
It is open source


Prerequest:
minimum python 3.6 or above


To install use below command

pip install locust
or
pip3 install locust

locust -V   //This will show the version of locust



Locust will support multiple protocols. By default it comes with http and https
Load testing can be done in distributed environment. Can have multiple nodes with master and slave architecture

We can use any IDE. I will use pycharm here


Open pycharm
Create project
Give project name
Give environment as virtual env and select python version base interpreter



---------------

Tutorial 2: user class:
-------------------

Below are frequently used class in locust
User
HttpUser
TaskSet
SequentialTaskSet
httpSession
Response
ResponseContextManager
Environment
Runner
WebUI



User class is the simple class used to create users to attach the system


Inside User class we can make use of below variables and methods to achive the test

abstract = True
on_start()
on_stop()
tasks
wait()
wait_time()
weight = 10


To go into env use below command
.\venv\Scripts\activate.bat


To come out of the env use below command
.\venv\Scripts\deactivate.bat



Create sample file in root with file name as app

Eg:

from locust import User, task


class MyUsers(User):

    @task
    def launch(self):
        print("launch da")

    @task
    def search(self):
        print("search da")


To run use below command

locust -f filename            //This command is used to execute
Eg:
locust -f app.js


http://localhost:8089/         //in browser open this and give total number of users, users per sec etc


Give total users, user per sec etc

We can stop the test in UI


Example with multiple users:

from locust import User, task, constant


class MyUsers(User):
    weight = 2         //How much weightable of users we should give
    wait_time = constant(1)

    @task
    def launch(self):
        print("launch da")

    @task
    def search(self):
        print("search da")


class MyUsers2(User):
    weight = 2    //How much weightable of users we should give
    wait_time = constant(1)

    @task
    def launch2(self):
        print("launch 2 da")

    @task
    def search2(self):
        print("search 2 da")



Number of users (peak concurrency): //How many task we have given give simular 
In above case, we will give 4 to pick all 4

Spawn rate (users started/second): 
This also matters




-------------


Tutorial 3: HttpUser class
----------------------

HttpUser is used to call http calls
It has client and different methods like get, post, put, delete etc
We can use this for api load testing.

Example:

from locust import HttpUser, task, constant

class MyHttpUsers(HttpUser):
    host = "https://reqres.in"           //host parameter is important. it will this host. If we not given, then we have to  pass while running as like --host="https://reqres.in"
    wait_time = constant(1)

    @task
    def get_users(self):
        self.client.get('/api/users?page=2')  //Get method

    @task
    def create_user(self):
        self.client.post('/api/users', data='''{ "name": "morpheus", "job": "leader" }''')  //Post method by passing json body



Example 2:
from locust import HttpUser, task, constant

class MyHttpUsers(HttpUser):
    wait_time = constant(1)

    @task
    def get_users(self):
        res = self.client.get('/api/users?page=2')
        print(res.status_code)    //printing status code
        print(res.headers)        //printing all headers
        print(res.text)           //printing response body

    @task
    def create_user(self):
        res = self.client.post('/api/users', data='''{ "name": "morpheus", "job": "leader" }''')
        print(res.status_code)
        print(res.headers)
        print(res.text)



In example 2, i have not used host. So i will past host when running. Eg: locust -f filename.js --host="https://reqres.in"

----------

To run in UI:
-------
--------

To launch use below command.

locust -f filename.js //This will start running the locust. Also show the url of locust UI.

Open browser and give url which is showing in above logs. Eg: http://localhost:8089/

Then we can give number of users, user per sec and host //these things we can also give in command line also like host etc
Click start swarming

Then it will start running.

UI will few options.
statistics - this will give more details about number of request, respons time, 90%ile, 99%ile, failure and more
Chart - will give the number of request per sec, response time and number of users etc in each time
Failure - this will give details about failure
Exception - this will give if any exception occurs in our load script when load running
Current ratio - this will ratio per user class and total ratio
Download data - here we can download the result in csv file


We can stop by clicking stop button in statistics
We can also click new test to again run the tes 


---



-----------------
